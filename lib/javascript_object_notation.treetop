grammar JavaScriptObjectNotation
  # Your solution goes here

  # Just scribbling on the blank page
  rule root
    blank
    content:(
      object
      /
      nothing
    )
    blank {
      def to_hash
        content.to_hash
      end
    }
  end


  rule nothing
    "" {
      def to_hash
        :nothing
      end
    }
  end

  rule object
    empty_object
    /
    non_empty_object
  end

  rule empty_object
    "{" blank "}" {
      def to_hash
        {}
      end
    }
  end

  rule non_empty_object
    "{" head:pair tail:("," pair)* "}" {
      def to_hash
        pairs = [head] + tail.elements.map(&:pair)
        pairs.map(&:to_hash).inject({}) { | h, pair | h.merge(pair) }
      end
    }
  end

  rule pair
    blank key:string blank ":" value {
      def to_hash
        { key.to_hash => value.to_hash }
      end
    }
  end

  rule value
    blank
    content:(
      string
      /
      decimal
      /
      integer
      /
      object
      /
      array
    )
    blank {
      def to_hash
        content.to_hash
      end
    }
  end

  rule array
    empty_array
    /
    non_empty_array
  end

  rule empty_array
    "[" blank "]" {
      def to_hash
        []
      end
    }
  end

  rule non_empty_array
    "[" head:value tail:("," value)* "]" {
      def to_hash
        values = [head] + tail.elements.map(&:value)
        values.map(&:to_hash)
      end
    }
  end

  rule string
    '"' content:[^\"]+ '"' {
      def to_hash
        content.text_value
      end
    }
  end

  rule integer
    "-"? [0-9]+ {
      def to_hash
        text_value.to_i
      end
    }
  end

  rule decimal
    "-"? [0-9]+ "." [0-9]+ {
      def to_hash
        text_value.to_f
      end
    }
  end

  rule blank
    [\s]*
  end
end
